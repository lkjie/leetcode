
'''
自己的想法：先列出所有可能，再去除所有的不可能
回溯算法：
dfs：一个字符一个字符的生成
bfs：

'''
from collections import Counter, defaultdict
from typing import List

class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        if not grid or not grid[0]:
            return 0
        nrow = len(grid)
        ncol = len(grid[0])
        d = [1, 0, -1, 0, 1]
        vd = [[False for _ in range(0,ncol)] for _ in range(0,nrow)]
        def bfs(r, c):
            if r > nrow or c > ncol:
                return 0
            vd[r][c] = True
            if grid[r][c] == '0':
                return 0
            q = set()
            q.add((r,c))
            while q:
                sz = len(q)
                qnext = set()
                q = list(q)
                for i in range(0, sz):
                    ri, ci = q.pop(0)
                    for j in range(0, len(d)-1):
                        rj = ri+d[j]
                        cj = ci+d[j+1]
                        if 0 <= rj < nrow and 0 <= cj < ncol:
                            if grid[rj][cj] == '1' and vd[rj][cj] == False:
                                vd[ri][ci] = True
                                qnext.add((rj,cj))
                q = qnext
            return 1
        res = 0
        for i in range(0, nrow):
            for j in range(0, ncol):
                if vd[i][j] == False:
                    res += bfs(i,j)
        return res


if __name__ == '__main__':
    s = Solution()
    l =  [["1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","0","1","0","1","1"],["0","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","0"],["1","0","1","1","1","0","0","1","1","0","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","0","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","0","1","1","1","1","1","1","0","1","1","1","0","1","1","1","0","1","1","1"],["0","1","1","1","1","1","1","1","1","1","1","1","0","1","1","0","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","0","1","1"],["1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["0","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","0","1","1","1","1","1","1","1","0","1","1","1","1","1","1"],["1","0","1","1","1","1","1","0","1","1","1","0","1","1","1","1","0","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","0"],["1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","0","0"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"]]
    l2 = [["1","1","1","1","0"],["1","1","0","1","0"],["1","1","0","0","0"],["0","0","0","0","0"]]
    r = s.numIslands(l2)
    print(r)
